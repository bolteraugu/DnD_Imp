{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\August Bolter\\\\WebstormProjects\\\\DnDProject\\\\src\\\\screens\\\\NotesScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport NoteCard from \"../components/NoteCard\";\nimport colors from \"../utils/colors\";\nimport Spinner from \"../components/Spinner\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { Button, Portal, Dialog, TextInput, FAB, Provider } from 'react-native-paper';\nexport default function NotesScreen(_ref) {\n  var _this = this;\n\n  var route = _ref.route;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      visible = _React$useState2[0],\n      setVisible = _React$useState2[1];\n\n  var showDialog = function showDialog() {\n    return setVisible(true);\n  };\n\n  var hideDialog = function hideDialog() {\n    return setVisible(false);\n  };\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputTitle = _useState2[0],\n      setInputTitle = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      inputContent = _useState4[0],\n      setInputContent = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      notes = _useState6[0],\n      setNotes = _useState6[1];\n\n  var _useState7 = useState(true),\n      _useState8 = _slicedToArray(_useState7, 2),\n      loading = _useState8[0],\n      setLoading = _useState8[1];\n\n  var charRef = route.params.charRef;\n  useEffect(function () {\n    var notesListener = charRef.collection('notes').onSnapshot(function (querySnapshot) {\n      var notes = querySnapshot.docs.map(function (doc) {\n        var data = _objectSpread({\n          _id: doc.id\n        }, doc.data());\n\n        return data;\n      });\n      setNotes(notes);\n\n      if (loading) {\n        setLoading(false);\n      }\n    }, function (error) {\n      alert(error);\n    });\n    return notesListener;\n  }, [charRef, loading]);\n\n  if (loading) {\n    return React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return React.createElement(Provider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.wrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, React.createElement(FlatList, {\n    data: notes,\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(NoteCard, {\n        title: item.title,\n        content: item.content,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 16\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }), React.createElement(FAB, {\n    style: styles.fab,\n    small: true,\n    icon: \"plus\",\n    onPress: showDialog,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }), React.createElement(Portal, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, React.createElement(Dialog, {\n    visible: visible,\n    onDismiss: hideDialog,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, React.createElement(Dialog.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, \"Create a New Note\"), React.createElement(Dialog.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, React.createElement(TextInput, {\n    onChangeText: function onChangeText(text) {\n      return setInputTitle(text);\n    },\n    label: \"Title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }), React.createElement(TextInput, {\n    onChangeText: function onChangeText(text) {\n      return setInputContent(text);\n    },\n    label: \"Content\",\n    multiline: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 15\n    }\n  })), React.createElement(Dialog.Actions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, React.createElement(Button, {\n    onPress: hideDialog,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 15\n    }\n  }, \"Cancel\"), React.createElement(Button, {\n    onPress: function onPress() {\n      charRef.collection('notes').add({\n        title: inputTitle,\n        content: inputContent\n      }).then(hideDialog, function (error) {\n        alert(error);\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }\n  }, \"Add\"))))));\n}\nvar styles = StyleSheet.create({\n  fab: {\n    backgroundColor: colors.primary,\n    bottom: 0,\n    left: 0,\n    margin: 20,\n    position: 'absolute'\n  },\n  wrapper: {\n    backgroundColor: colors.white,\n    height: '100%',\n    padding: 5\n  }\n});","map":{"version":3,"sources":["C:/Users/August Bolter/WebstormProjects/DnDProject/src/screens/NotesScreen.js"],"names":["React","useEffect","useState","NoteCard","colors","Spinner","Button","Portal","Dialog","TextInput","FAB","Provider","NotesScreen","route","visible","setVisible","showDialog","hideDialog","inputTitle","setInputTitle","inputContent","setInputContent","notes","setNotes","loading","setLoading","charRef","params","notesListener","collection","onSnapshot","querySnapshot","docs","map","doc","data","_id","id","error","alert","styles","wrapper","item","title","content","fab","text","add","then","StyleSheet","create","backgroundColor","primary","bottom","left","margin","position","white","height","padding"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'; //If I need revision on what useEffect is for https://reactjs.org/docs/hooks-effect.html\nimport NoteCard from '../components/NoteCard'; //NoteCard is essentially represents a note after it has been created\nimport colors from '../utils/colors'; //Getting colors we are using for the app\nimport Spinner from '../components/Spinner'; //Spinner icon that shows\nimport {StyleSheet, View, FlatList} from 'react-native'; //FlatList for viewing things in a list, View and Stylesheet we know too\n//Importing everything we need from react native paper. FAB stands for floating action button (represents the primary action in the screen). Portal is for rendering a component at\n//a different place in the parent (component) tree.\nimport {\n  Button,\n  Portal,\n  Dialog,\n  TextInput,\n  FAB,\n  Provider,\n} from 'react-native-paper';\n\nexport default function NotesScreen({route}) {\n  const [visible, setVisible] = React.useState(false); //For whether the pop-up will be visible\n  const showDialog = () => setVisible(true);\n  const hideDialog = () => setVisible(false);\n  const [inputTitle, setInputTitle] = useState(''); //Notes title\n  const [inputContent, setInputContent] = useState(''); //Notes content\n  const [notes, setNotes] = useState([]); //Notes\n  const [loading, setLoading] = useState(true); //Whether the data is loading\n  const {charRef} = route.params; //Can find params in CharacterCard. Essentially is just the character.\n\n  // Load data from firebase\n  useEffect(() => {\n    const notesListener = charRef.collection('notes').onSnapshot(\n      //Pretty much gets a snapshot of the notes from the currently looked at character\n      (querySnapshot) => {\n        //Query this snapshot\n        //Pretty much gets each element from docs using map and using map applies the function below. The function gets the id from the item id and gets the data too using data().\n        const notes = querySnapshot.docs.map((doc) => {\n          const data = {\n            _id: doc.id,\n            ...doc.data(),\n          };\n          return data;\n        });\n        //Sets notes to this new array that was made using map (the array contains the id and the data)\n        setNotes(notes);\n\n        //Pretty much as soon as it has finished getting the data it is set to false since it is no longer loading/getting it.\n        if (loading) {\n          setLoading(false);\n        }\n      },\n      //If we get an error when loading the data then show this.\n      (error) => {\n        alert(error);\n      }\n    );\n    //Return the snapshot of notes\n    return notesListener;\n  }, [charRef, loading]);\n\n  if (loading) {\n    //Show spinner if we are still getting the data.\n    return <Spinner />;\n  }\n\n  // Edit Current Notes - need to do this\n\n  // Delete Notes - need to do this\n\n  return (\n    <Provider>\n      <View style={styles.wrapper}>\n        <FlatList\n          data={notes} //Data of the flatList is the notes\n          renderItem={(\n            {item} //Render each item with the title and content\n          ) => <NoteCard title={item.title} content={item.content} />}\n        />\n        <FAB style={styles.fab} small icon=\"plus\" onPress={showDialog} />\n        <Portal>\n          <Dialog visible={visible} onDismiss={hideDialog}>\n            <Dialog.Title>Create a New Note</Dialog.Title>\n            <Dialog.Content>\n              <TextInput\n                onChangeText={(text) => setInputTitle(text)}\n                label=\"Title\"\n              />\n              <TextInput // Content of the note (I think note should be shown multi-lined by default instead of one lined.\n                onChangeText={(text) => setInputContent(text)}\n                label=\"Content\"\n                multiline={true}\n              />\n            </Dialog.Content>\n            <Dialog.Actions>\n              <Button onPress={hideDialog}>Cancel</Button>\n              <Button\n                onPress={() => {\n                  //If add button is pressed add the note to the notes collection in the firebase of the specified character\n                  charRef\n                    .collection('notes')\n                    .add({\n                      //Add the title and the content\n                      title: inputTitle,\n                      content: inputContent,\n                    })\n                    //Show the error if an error occurs. Also I think hide the window??? Not sure why hideDialog is called without {}.\n                    .then(hideDialog, (error) => {\n                      alert(error);\n                    });\n                }}\n              >\n                Add\n              </Button>\n            </Dialog.Actions>\n          </Dialog>\n        </Portal>\n      </View>\n    </Provider>\n  );\n}\n\n//Styles for the content\nconst styles = StyleSheet.create({\n  fab: {\n    //Absolute so it ignores it's parents positoning and instead is positioned bottom left corner with a margin of 20.\n    backgroundColor: colors.primary,\n    bottom: 0,\n    left: 0,\n    margin: 20,\n    position: 'absolute',\n  },\n  wrapper: {\n    backgroundColor: colors.white,\n    height: '100%',\n    padding: 5,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}