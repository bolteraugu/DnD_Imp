{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\August Bolter\\\\WebstormProjects\\\\DnDProject\\\\src\\\\screens\\\\DMScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Button } from 'react-native-paper';\nimport CharacterCard from \"../components/CharacterCard\";\nimport Chat from \"../components/Chat\";\nimport CharacterTemplate from \"../utils/character_template.json\";\nimport Spinner from \"../components/Spinner\";\nimport firebase from 'firebase';\nimport 'firebase/firestore';\nexport default function DMScreen(_ref) {\n  var _this = this;\n\n  var route = _ref.route,\n      navigation = _ref.navigation;\n  var group = route.params.group;\n  var groupRef = firebase.firestore().collection('groups').doc(group._id);\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      characters = _useState2[0],\n      setCharacters = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  useEffect(function () {\n    var characterListener = groupRef.collection('characters').onSnapshot(function (querySnapshot) {\n      var characters = querySnapshot.docs.map(function (doc) {\n        var data = _objectSpread({\n          _id: doc.id\n        }, doc.data());\n\n        return data;\n      });\n      setCharacters(characters);\n\n      if (loading) {\n        setLoading(false);\n      }\n    }, function (error) {\n      alert(error);\n    });\n    return characterListener;\n  }, [groupRef, loading]);\n\n  if (loading) {\n    return React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 12\n      }\n    });\n  }\n\n  function addCharacter() {\n    groupRef.collection('characters').add(CharacterTemplate).then(console.log('Successfully added character'), function (error) {\n      return alert(error);\n    });\n  }\n\n  function updateCharacter(index, field, text, isInt) {\n    var newCharacters = _toConsumableArray(characters);\n\n    newCharacters[index][field] = isInt ? Number(text) : text;\n    setCharacters(newCharacters);\n  }\n\n  var index = 0;\n  return React.createElement(View, {\n    style: styles.wrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.charactersContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, React.createElement(FlatList, {\n    data: characters,\n    keyExtractor: function keyExtractor(item) {\n      return item._id;\n    },\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(CharacterCard, {\n        character: item,\n        index: index++,\n        groupRef: groupRef,\n        onChange: updateCharacter,\n        navigation: navigation,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }\n      });\n    },\n    ListFooterComponent: React.createElement(Button, {\n      mode: \"contained\",\n      onPress: addCharacter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, \"Add New Character\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  })), React.createElement(Chat, {\n    groupRef: groupRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }));\n}\nDMScreen.navigationOptions = {\n  header: null\n};\nvar styles = StyleSheet.create({\n  charactersContainer: {\n    flex: 2\n  },\n  wrapper: {\n    flexDirection: 'row',\n    height: '100%'\n  }\n});","map":{"version":3,"sources":["C:/Users/August Bolter/WebstormProjects/DnDProject/src/screens/DMScreen.js"],"names":["React","useState","useEffect","Button","CharacterCard","Chat","CharacterTemplate","Spinner","firebase","DMScreen","route","navigation","group","params","groupRef","firestore","collection","doc","_id","characters","setCharacters","loading","setLoading","characterListener","onSnapshot","querySnapshot","docs","map","data","id","error","alert","addCharacter","add","then","console","log","updateCharacter","index","field","text","isInt","newCharacters","Number","styles","wrapper","charactersContainer","item","navigationOptions","header","StyleSheet","create","flex","flexDirection","height"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {FlatList, StyleSheet, View} from 'react-native';\nimport {Button} from 'react-native-paper';\nimport CharacterCard from '../components/CharacterCard';\nimport Chat from '../components/Chat';\nimport CharacterTemplate from '../utils/character_template.json';\nimport Spinner from '../components/Spinner';\nimport firebase from 'firebase';\nimport 'firebase/firestore';\n\nexport default function DMScreen({route, navigation}) {\n  const {group} = route.params;\n\n  const groupRef = firebase.firestore().collection('groups').doc(group._id);\n  const [characters, setCharacters] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const characterListener = groupRef.collection('characters').onSnapshot(\n      (querySnapshot) => {\n        const characters = querySnapshot.docs.map((doc) => {\n          const data = {\n            _id: doc.id,\n            ...doc.data(),\n          };\n          return data;\n        });\n        setCharacters(characters);\n\n        if (loading) {\n          setLoading(false);\n        }\n      },\n      (error) => {\n        alert(error);\n      }\n    );\n    return characterListener;\n  }, [groupRef, loading]);\n\n  if (loading) {\n    return <Spinner />;\n  }\n\n  function addCharacter() {\n    groupRef\n      .collection('characters')\n      .add(CharacterTemplate)\n      .then(console.log('Successfully added character'), (error) =>\n        alert(error)\n      );\n  }\n\n  function updateCharacter(index, field, text, isInt) {\n    const newCharacters = [...characters];\n    newCharacters[index][field] = isInt ? Number(text) : text;\n    setCharacters(newCharacters);\n  }\n\n  var index = 0;\n  return (\n    <View style={styles.wrapper}>\n      <View style={styles.charactersContainer}>\n        <FlatList\n          data={characters}\n          keyExtractor={(item) => item._id}\n          renderItem={({item}) => (\n            <CharacterCard\n              character={item}\n              index={index++}\n              groupRef={groupRef}\n              onChange={updateCharacter}\n              navigation={navigation}\n            />\n          )}\n          ListFooterComponent={\n            <Button mode=\"contained\" onPress={addCharacter}>\n              Add New Character\n            </Button>\n          }\n        />\n      </View>\n      <Chat groupRef={groupRef} />\n    </View>\n  );\n}\n\nDMScreen.navigationOptions = {\n  header: null,\n};\n\nconst styles = StyleSheet.create({\n  charactersContainer: {\n    flex: 2,\n  },\n  wrapper: {\n    flexDirection: 'row',\n    height: '100%',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}