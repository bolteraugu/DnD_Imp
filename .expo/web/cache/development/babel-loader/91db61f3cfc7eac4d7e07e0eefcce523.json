{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\August Bolter\\\\WebstormProjects\\\\DnDProject\\\\src\\\\screens\\\\RegisterScreen.js\";\nimport React, { useState, useContext } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Title, Text, TextInput, Button, IconButton } from 'react-native-paper';\nimport { AuthUserContext } from \"../navigation/AuthUserProvider\";\nimport colorScheme from \"../utils/colors.js\";\nexport default function SignupScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      confirmPassword = _useState6[0],\n      setConfirmPassword = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      passwordDontMatch = _useState8[0],\n      setPasswordDontMatch = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      passwordVisible = _useState10[0],\n      setPasswordVisible = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      confirmPasswordVisible = _useState12[0],\n      setConfirmPasswordVisible = _useState12[1];\n\n  var _useContext = useContext(AuthUserContext),\n      register = _useContext.register;\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, \"Register to Dungeon Minion 5e\"), React.createElement(TextInput, {\n    label: \"Email\",\n    value: email,\n    style: styles.input,\n    autoCapitalize: \"none\",\n    onChangeText: function onChangeText(userEmail) {\n      return setEmail(userEmail);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: styles.passwordContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, React.createElement(TextInput, {\n    style: styles.passwordField,\n    label: \"Password\",\n    value: password,\n    secureTextEntry: !passwordVisible,\n    onChangeText: function onChangeText(userPassword) {\n      return setPassword(userPassword);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }), React.createElement(IconButton, {\n    style: styles.visibilityIcon,\n    icon: passwordVisible ? 'eye-off' : 'eye',\n    size: 20,\n    color: \"#000000\",\n    onPress: function onPress() {\n      setPasswordVisible(!passwordVisible);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    style: styles.passwordContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, React.createElement(TextInput, {\n    style: styles.passwordField,\n    label: \"Confirm Password\",\n    value: confirmPassword,\n    secureTextEntry: !confirmPasswordVisible,\n    onChangeText: function onChangeText(confirmUserPassword) {\n      return setConfirmPassword(confirmUserPassword);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }), React.createElement(IconButton, {\n    style: styles.visibilityIcon,\n    icon: confirmPasswordVisible ? 'eye-off' : 'eye',\n    size: 20,\n    color: \"#000000\",\n    onPress: function onPress() {\n      setConfirmPasswordVisible(!confirmPasswordVisible);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    style: styles.row,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, React.createElement(IconButton, {\n    icon: \"keyboard-backspace\",\n    size: 30,\n    color: \"#6646ee\",\n    onPress: function onPress() {\n      return navigation.goBack();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }), React.createElement(Button, {\n    mode: \"contained\",\n    style: styles.button,\n    onPress: function onPress() {\n      if (password === confirmPassword) {\n        setPasswordDontMatch(false);\n        register(email, password);\n      } else {\n        setPasswordDontMatch(true);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, \"Signup\")), passwordDontMatch && React.createElement(Text, {\n    style: styles.errorText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, ' ', \"The passwords you entered did not match. Please try again.\", ' '));\n}\nvar styles = StyleSheet.create({\n  passwordContainer: {\n    justifyContent: 'center',\n    height: 60,\n    margin: 5\n  },\n  passwordField: {\n    height: 60\n  },\n  visibilityIcon: {\n    position: 'absolute',\n    right: 10\n  },\n  errorText: {\n    color: colorScheme.red\n  },\n  button: {\n    flex: 1,\n    margin: 5\n  },\n  container: {\n    alignSelf: 'center',\n    marginTop: 200,\n    width: 500\n  },\n  input: {\n    height: 60,\n    margin: 5\n  },\n  row: {\n    flexDirection: 'row'\n  }\n});","map":{"version":3,"sources":["C:/Users/August Bolter/WebstormProjects/DnDProject/src/screens/RegisterScreen.js"],"names":["React","useState","useContext","Title","Text","TextInput","Button","IconButton","AuthUserContext","colorScheme","SignupScreen","navigation","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","passwordDontMatch","setPasswordDontMatch","passwordVisible","setPasswordVisible","confirmPasswordVisible","setConfirmPasswordVisible","register","styles","container","input","userEmail","passwordContainer","passwordField","userPassword","visibilityIcon","confirmUserPassword","row","goBack","button","errorText","StyleSheet","create","justifyContent","height","margin","position","right","color","red","flex","alignSelf","marginTop","width","flexDirection"],"mappings":"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","sourcesContent":["import React, {useState, useContext} from 'react'; //Getting the ability to get state and context\nimport {View, StyleSheet} from 'react-native'; //Getting view component and style sheet component from react native\nimport {Title, Text, TextInput, Button, IconButton} from 'react-native-paper'; //Getting title, text input, button and icon button from react native paper (since this is the library being followed)\nimport {AuthUserContext} from '../navigation/AuthUserProvider'; //Getting AuthUserContext from AuthUserProvider\nimport colorScheme from '../utils/colors.js';\n\n//Gets the navigation prop since the sign upscreen is StackScreen part of the stack navigator, the two props passed to any stackscreen is navigation and route.\nexport default function SignupScreen({navigation}) {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [passwordDontMatch, setPasswordDontMatch] = useState(false);\n  const [passwordVisible, setPasswordVisible] = useState(false);\n  const [confirmPasswordVisible, setConfirmPasswordVisible] = useState(false);\n\n  const {register} = useContext(AuthUserContext); //Reasoning why we are setting context here to AuthUserContext is because we want to keep track of the current user.\n\n  //We are returning what the user sees on the screen\n  return (\n    //First is the view component which holds the email and login fields and the title\n    <View style={styles.container}>\n      <Title>Register to Dungeon Minion 5e</Title>\n      <TextInput\n        label=\"Email\" // Label of the text input\n        value={email} // The value of the text input should be the email variable as the email variable will always be set as soon as onChangeText is called\n        style={styles.input} // The style of the text input (which is just setting the margin to 5)\n        autoCapitalize=\"none\" // Don't auto capitalise the input. Important considering email's usually aren't captalised and are quite specific\n        onChangeText={(userEmail) => setEmail(userEmail)} // userEmail is the new text when the text is changed, set email to this. Then value will be changed too.\n      />\n      <View style={styles.passwordContainer}>\n        <TextInput\n          style={styles.passwordField}\n          label=\"Password\"\n          value={password}\n          secureTextEntry={!passwordVisible} // Text is obscured so password can't be seen\n          onChangeText={(userPassword) => setPassword(userPassword)}\n        />\n        <IconButton\n          style={styles.visibilityIcon}\n          icon={passwordVisible ? 'eye-off' : 'eye'}\n          size={20}\n          color=\"#000000\"\n          onPress={() => {\n            setPasswordVisible(!passwordVisible);\n          }}\n        />\n      </View>\n      <View style={styles.passwordContainer}>\n        <TextInput\n          style={styles.passwordField}\n          label=\"Confirm Password\"\n          value={confirmPassword}\n          secureTextEntry={!confirmPasswordVisible} // Text is obscured so password can't be seen\n          onChangeText={(confirmUserPassword) =>\n            setConfirmPassword(confirmUserPassword)\n          }\n        />\n        <IconButton\n          style={styles.visibilityIcon}\n          icon={confirmPasswordVisible ? 'eye-off' : 'eye'}\n          size={20}\n          color=\"#000000\"\n          onPress={() => {\n            setConfirmPasswordVisible(!confirmPasswordVisible);\n          }}\n        />\n      </View>\n      <View style={styles.row}>\n        <IconButton\n          icon=\"keyboard-backspace\" //Getting the back icon image\n          size={30} //Setting the size\n          color=\"#6646ee\" //And the color\n          onPress={() => navigation.goBack()} //When clicked on make it go back to the previous route\n        />\n        <Button\n          mode=\"contained\" //Sets the style of the button to have background\n          style={styles.button} //Setting how much space the button will take up and it's margin\n          onPress={() => {\n            if (password === confirmPassword) {\n              setPasswordDontMatch(false);\n              register(email, password);\n            } else {\n              setPasswordDontMatch(true);\n            }\n          }} // Register when the button is clicked on. Uses the AuthUserContext provided before. I assume the name is important of the const created. Since it matches up with the provider value in AuthUserProvider.\n        >\n          Signup\n        </Button>\n      </View>\n      {passwordDontMatch && (\n        <Text style={styles.errorText}>\n          {' '}\n          The passwords you entered did not match. Please try again.{' '}\n        </Text>\n      )}\n    </View>\n  );\n}\n\n//The stylesheet.\nconst styles = StyleSheet.create({\n  passwordContainer: {\n    justifyContent: 'center',\n    height: 60,\n    margin: 5,\n  },\n\n  passwordField: {\n    height: 60,\n  },\n\n  visibilityIcon: {\n    position: 'absolute',\n    right: 10,\n  },\n\n  errorText: {\n    color: colorScheme.red,\n  },\n  button: {\n    flex: 1,\n    margin: 5,\n  },\n  container: {\n    //Aligns the content on this screen to the center, sets the content 200 from the top and sets the width of it to 500\n    alignSelf: 'center',\n    marginTop: 200,\n    width: 500,\n  },\n  input: {\n    height: 60,\n    margin: 5,\n  },\n  row: {\n    //This is why the back button and the submit button are on the same row.\n    flexDirection: 'row',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}