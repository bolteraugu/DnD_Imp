{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\August Bolter\\\\WebstormProjects\\\\DnDProject\\\\src\\\\navigation\\\\AuthUserProvider.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { createContext, useState } from 'react';\nimport firebase from 'firebase';\nimport 'firebase/auth';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport auth from '@react-native-firebase/auth';\nimport { appleAuth, appleAuthAndroid } from '@invertase/react-native-apple-authentication';\nimport * as Facebook from 'expo-facebook';\nimport { v4 as uuid } from 'uuid';\nimport * as Google from 'expo-google-app-auth';\nexport var AuthUserContext = createContext({});\nexport var AuthUserProvider = function AuthUserProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      storedAccountType = _useState4[0],\n      setStoredAccountType = _useState4[1];\n\n  return React.createElement(AuthUserContext.Provider, {\n    value: {\n      user: user,\n      setUser: setUser,\n      login: function login(email, password, rememberMe) {\n        return _regeneratorRuntime.async(function login$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n\n                if (!rememberMe) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 4;\n                return _regeneratorRuntime.awrap(firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL));\n\n              case 4:\n                _context.next = 8;\n                break;\n\n              case 6:\n                _context.next = 8;\n                return _regeneratorRuntime.awrap(firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE));\n\n              case 8:\n                _context.next = 10;\n                return _regeneratorRuntime.awrap(firebase.auth().signInWithEmailAndPassword(email, password));\n\n              case 10:\n                _context.next = 16;\n                break;\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n                alert(_context.t0);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, [[0, 12]], Promise);\n      },\n      register: function register(email, password) {\n        return _regeneratorRuntime.async(function register$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return _regeneratorRuntime.awrap(firebase.auth().createUserWithEmailAndPassword(email, password).then(function (user) {\n                  firebase.firestore().collection('user-logs').doc('user_creation').collection('logs').doc(user.user.toJSON().email).set({\n                    text: \"User \" + user.user.toJSON().email + \" was created.\",\n                    accountType: 'Standard',\n                    createdOn: new Date().toString()\n                  });\n                }));\n\n              case 3:\n                _context2.next = 9;\n                break;\n\n              case 5:\n                _context2.prev = 5;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.log(_context2.t0);\n                alert(_context2.t0);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, [[0, 5]], Promise);\n      },\n      logout: function logout() {\n        return _regeneratorRuntime.async(function logout$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return _regeneratorRuntime.awrap(firebase.auth().signOut());\n\n              case 3:\n                _context3.next = 9;\n                break;\n\n              case 5:\n                _context3.prev = 5;\n                _context3.t0 = _context3[\"catch\"](0);\n                console.error(_context3.t0);\n                alert(_context3.t0);\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, null, [[0, 5]], Promise);\n      },\n      forgotPassword: function forgotPassword(email) {\n        return _regeneratorRuntime.async(function forgotPassword$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return _regeneratorRuntime.awrap(firebase.auth().sendPasswordResetEmail(email));\n\n              case 3:\n                firebase.firestore().collection('user-logs').doc('user-creation').collection('logs').doc(email).get().then(function (snapshot) {\n                  setStoredAccountType(snapshot.get('accountType'));\n                });\n                _context4.next = 6;\n                return _regeneratorRuntime.awrap(firebase.firestore().collection('user-logs').doc('reset_password_requests').collection('logs').doc(email).set({\n                  text: \"User \" + email + \" requested a reset password email to be sent to their email address.\",\n                  accountType: storedAccountType,\n                  requestedOn: new Date().toString()\n                }));\n\n              case 6:\n                Alert.alert('Password reset link sent', 'A password reset link has been sent to your email.');\n                _context4.next = 13;\n                break;\n\n              case 9:\n                _context4.prev = 9;\n                _context4.t0 = _context4[\"catch\"](0);\n                console.log(_context4.t0);\n                alert(_context4.t0);\n\n              case 13:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, null, null, [[0, 9]], Promise);\n      },\n      onGoogleButtonPress: function onGoogleButtonPress(rememberMe) {\n        var _await$Google$logInAs, type, token, docToConsider, docExists, credential;\n\n        return _regeneratorRuntime.async(function onGoogleButtonPress$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _context5.next = 3;\n                return _regeneratorRuntime.awrap(Google.logInAsync({\n                  androidClientId: '1059214854860-uvhjai9r85bno10luchjk9r7aknrqr3b.apps.googleusercontent.com'\n                }));\n\n              case 3:\n                _await$Google$logInAs = _context5.sent;\n                type = _await$Google$logInAs.type;\n                token = _await$Google$logInAs.token;\n\n                if (!(type === 'success')) {\n                  _context5.next = 21;\n                  break;\n                }\n\n                if (!rememberMe) {\n                  _context5.next = 12;\n                  break;\n                }\n\n                _context5.next = 10;\n                return _regeneratorRuntime.awrap(firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL));\n\n              case 10:\n                _context5.next = 14;\n                break;\n\n              case 12:\n                _context5.next = 14;\n                return _regeneratorRuntime.awrap(firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE));\n\n              case 14:\n                docToConsider = firebase.firestore().collection('user-logs').doc('user-creation').collection('logs').doc(user.user.toJSON().email);\n                _context5.next = 17;\n                return _regeneratorRuntime.awrap(docToConsider.get());\n\n              case 17:\n                docExists = _context5.sent.exists;\n                credential = firebase.auth.GoogleAuthProvider.credential(token);\n                _context5.next = 21;\n                return _regeneratorRuntime.awrap(firebase.auth().signInWithCredential(credential).then(function () {\n                  if (!docExists) {\n                    docToConsider.get().then(function (snapshot) {\n                      setStoredAccountType(snapshot.get('accountType'));\n                    }).then(function () {\n                      docToConsider.set({\n                        text: \"User \" + user.user.toJSON().email + \" was created.\",\n                        accountType: 'Google',\n                        createdOn: new Date().toString()\n                      });\n                    });\n                  }\n                }));\n\n              case 21:\n                _context5.next = 26;\n                break;\n\n              case 23:\n                _context5.prev = 23;\n                _context5.t0 = _context5[\"catch\"](0);\n                console.log('LoginScreen.js 19 | error with login', _context5.t0);\n\n              case 26:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, null, null, [[0, 23]], Promise);\n      },\n      onAppleButtonPress: function onAppleButtonPress(rememberMe) {\n        var appleAuthRequestResponse, identityToken, nonce, appleCredential;\n        return _regeneratorRuntime.async(function onAppleButtonPress$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return _regeneratorRuntime.awrap(appleAuth.performRequest({\n                  requestedOperation: appleAuth.Operation.LOGIN,\n                  requestedScopes: [appleAuth.Scope.EMAIL, appleAuth.Scope.FULL_NAME]\n                }));\n\n              case 2:\n                appleAuthRequestResponse = _context6.sent;\n\n                if (appleAuthRequestResponse.identityToken) {\n                  _context6.next = 5;\n                  break;\n                }\n\n                throw 'Apple Sign-In failed - no identify token returned';\n\n              case 5:\n                identityToken = appleAuthRequestResponse.identityToken, nonce = appleAuthRequestResponse.nonce;\n                appleCredential = auth.AppleAuthProvider.credential(identityToken, nonce);\n\n                if (!rememberMe) {\n                  _context6.next = 12;\n                  break;\n                }\n\n                _context6.next = 10;\n                return _regeneratorRuntime.awrap(firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL));\n\n              case 10:\n                _context6.next = 14;\n                break;\n\n              case 12:\n                _context6.next = 14;\n                return _regeneratorRuntime.awrap(firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE));\n\n              case 14:\n                return _context6.abrupt(\"return\", auth().signInWithCredential(appleCredential));\n\n              case 15:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      onAndroidAppleButtonPress: function onAndroidAppleButtonPress(rememberMe) {\n        var rawNonce, response;\n        return _regeneratorRuntime.async(function onAndroidAppleButtonPress$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                rawNonce = uuid();\n                _context7.prev = 1;\n                appleAuthAndroid.configure({\n                  clientId: 'needToChangeThis',\n                  redirectUri: 'needToChangeThis',\n                  scope: appleAuthAndroid.Scope.ALL,\n                  responseType: appleAuthAndroid.ResponseType.ALL,\n                  nonce: rawNonce\n                });\n                _context7.next = 5;\n                return _regeneratorRuntime.awrap(appleAuthAndroid.signIn());\n\n              case 5:\n                response = _context7.sent;\n\n                if (!response) {\n                  _context7.next = 14;\n                  break;\n                }\n\n                if (!rememberMe) {\n                  _context7.next = 12;\n                  break;\n                }\n\n                _context7.next = 10;\n                return _regeneratorRuntime.awrap(firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL));\n\n              case 10:\n                _context7.next = 14;\n                break;\n\n              case 12:\n                _context7.next = 14;\n                return _regeneratorRuntime.awrap(firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE));\n\n              case 14:\n                _context7.next = 20;\n                break;\n\n              case 16:\n                _context7.prev = 16;\n                _context7.t0 = _context7[\"catch\"](1);\n                console.log(_context7.t0);\n                alert(_context7.t0);\n\n              case 20:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, null, null, [[1, 16]], Promise);\n      },\n      onFacebookButtonPress: function onFacebookButtonPress(rememberMe) {\n        var _await$Facebook$logIn, type, token, docToConsider, docExists, credential;\n\n        return _regeneratorRuntime.async(function onFacebookButtonPress$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return _regeneratorRuntime.awrap(Facebook.logInWithReadPermissionsAsync({\n                  permissions: ['public_profile', 'email']\n                }));\n\n              case 2:\n                _await$Facebook$logIn = _context8.sent;\n                type = _await$Facebook$logIn.type;\n                token = _await$Facebook$logIn.token;\n\n                if (!(type === 'success')) {\n                  _context8.next = 20;\n                  break;\n                }\n\n                if (!rememberMe) {\n                  _context8.next = 11;\n                  break;\n                }\n\n                _context8.next = 9;\n                return _regeneratorRuntime.awrap(firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL));\n\n              case 9:\n                _context8.next = 13;\n                break;\n\n              case 11:\n                _context8.next = 13;\n                return _regeneratorRuntime.awrap(firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE));\n\n              case 13:\n                docToConsider = firebase.firestore().collection('user-logs').doc('user-creation').collection('logs').doc(user.user.toJSON().email);\n                _context8.next = 16;\n                return _regeneratorRuntime.awrap(docToConsider.get());\n\n              case 16:\n                docExists = _context8.sent.exists;\n                credential = firebase.auth.FacebookAuthProvider.credential(token);\n                _context8.next = 20;\n                return _regeneratorRuntime.awrap(firebase.auth().signInWithCredential(credential).then(function () {\n                  if (!docExists) {\n                    docToConsider.get().then(function (snapshot) {\n                      setStoredAccountType(snapshot.get('accountType'));\n                    }).then(function () {\n                      docToConsider.set({\n                        text: \"User \" + user.user.toJSON().email + \" was created.\",\n                        accountType: 'Facebook',\n                        createdOn: new Date().toString()\n                      });\n                    });\n                  }\n                }));\n\n              case 20:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, children);\n};","map":{"version":3,"sources":["C:/Users/August Bolter/WebstormProjects/DnDProject/src/navigation/AuthUserProvider.js"],"names":["React","createContext","useState","firebase","auth","appleAuth","appleAuthAndroid","Facebook","v4","uuid","Google","AuthUserContext","AuthUserProvider","children","user","setUser","storedAccountType","setStoredAccountType","login","email","password","rememberMe","setPersistence","Auth","Persistence","LOCAL","NONE","signInWithEmailAndPassword","console","log","alert","register","createUserWithEmailAndPassword","then","firestore","collection","doc","toJSON","set","text","accountType","createdOn","Date","toString","logout","signOut","error","forgotPassword","sendPasswordResetEmail","get","snapshot","requestedOn","Alert","onGoogleButtonPress","logInAsync","androidClientId","type","token","docToConsider","docExists","exists","credential","GoogleAuthProvider","signInWithCredential","onAppleButtonPress","performRequest","requestedOperation","Operation","LOGIN","requestedScopes","Scope","EMAIL","FULL_NAME","appleAuthRequestResponse","identityToken","nonce","appleCredential","AppleAuthProvider","onAndroidAppleButtonPress","rawNonce","configure","clientId","redirectUri","scope","ALL","responseType","ResponseType","signIn","response","onFacebookButtonPress","logInWithReadPermissionsAsync","permissions","FacebookAuthProvider"],"mappings":"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","sourcesContent":["import React, {createContext, useState} from 'react';\nimport firebase from 'firebase';\nimport 'firebase/auth';\nimport {Alert} from 'react-native';\nimport auth from '@react-native-firebase/auth';\nimport {\n  appleAuth,\n  appleAuthAndroid,\n} from '@invertase/react-native-apple-authentication';\nimport * as Facebook from 'expo-facebook';\nimport {v4 as uuid} from 'uuid';\nimport * as Google from 'expo-google-app-auth';\n\n/**\n * This provider is created\n * to access user in whole app\n */\n\nexport const AuthUserContext = createContext({});\n\nexport const AuthUserProvider = ({children}) => {\n  const [user, setUser] = useState(null);\n  const [storedAccountType, setStoredAccountType] = useState('');\n\n  return (\n    <AuthUserContext.Provider\n      value={{\n        user,\n        setUser,\n        login: async (email, password, rememberMe) => {\n          try {\n            if (rememberMe) {\n              await firebase\n                .auth()\n                .setPersistence(firebase.auth.Auth.Persistence.LOCAL);\n            } else {\n              await firebase\n                .auth()\n                .setPersistence(firebase.auth.Auth.Persistence.NONE);\n            }\n            await firebase.auth().signInWithEmailAndPassword(email, password);\n          } catch (e) {\n            console.log(e);\n            alert(e);\n          }\n        },\n        register: async (email, password) => {\n          try {\n            await firebase\n              .auth()\n              .createUserWithEmailAndPassword(email, password)\n              .then((user) => {\n                firebase\n                  .firestore()\n                  .collection('user-logs')\n                  .doc('user_creation')\n                  .collection('logs')\n                  .doc(user.user.toJSON().email)\n                  .set({\n                    text: `User ${user.user.toJSON().email} was created.`,\n                    accountType: 'Standard',\n                    createdOn: new Date().toString(),\n                  });\n              });\n          } catch (e) {\n            console.log(e);\n            alert(e);\n          }\n        },\n        logout: async () => {\n          try {\n            await firebase.auth().signOut();\n          } catch (e) {\n            console.error(e);\n            alert(e);\n          }\n        },\n        forgotPassword: async (email) => {\n          try {\n            await firebase.auth().sendPasswordResetEmail(email);\n\n            firebase\n              .firestore()\n              .collection('user-logs')\n              .doc('user-creation')\n              .collection('logs')\n              .doc(email)\n              .get()\n              .then((snapshot) => {\n                setStoredAccountType(snapshot.get('accountType'));\n              });\n\n            await firebase\n              .firestore()\n              .collection('user-logs')\n              .doc('reset_password_requests')\n              .collection('logs')\n              .doc(email)\n              .set({\n                text: `User ${email} requested a reset password email to be sent to their email address.`,\n                accountType: storedAccountType,\n                requestedOn: new Date().toString(),\n              });\n            Alert.alert(\n              'Password reset link sent',\n              'A password reset link has been sent to your email.'\n            );\n          } catch (e) {\n            console.log(e);\n            alert(e);\n          }\n        },\n\n        //Got help from for this code https://inaguirre.medium.com/react-native-login-with-google-quick-guide-fe351e464752\n        onGoogleButtonPress: async (rememberMe) => {\n          try {\n            const {type, token} = await Google.logInAsync({\n              //iosClientId: `<YOUR_IOS_CLIENT_ID>`,\n              androidClientId:\n                '1059214854860-uvhjai9r85bno10luchjk9r7aknrqr3b.apps.googleusercontent.com',\n            });\n\n            if (type === 'success') {\n              if (rememberMe) {\n                await firebase\n                  .auth()\n                  .setPersistence(firebase.auth.Auth.Persistence.LOCAL);\n              } else {\n                await firebase\n                  .auth()\n                  .setPersistence(firebase.auth.Auth.Persistence.NONE);\n              }\n\n              let docToConsider = firebase\n                .firestore()\n                .collection('user-logs')\n                .doc('user-creation')\n                .collection('logs')\n                .doc(user.user.toJSON().email);\n              let docExists = (await docToConsider.get()).exists;\n\n              const credential =\n                firebase.auth.GoogleAuthProvider.credential(token);\n              await firebase\n                .auth()\n                .signInWithCredential(credential)\n                .then(() => {\n                  if (!docExists) {\n                    docToConsider\n                      .get()\n                      .then((snapshot) => {\n                        setStoredAccountType(snapshot.get('accountType'));\n                      })\n                      .then(() => {\n                        docToConsider.set({\n                          text: `User ${user.user.toJSON().email} was created.`,\n                          accountType: 'Google',\n                          createdOn: new Date().toString(),\n                        });\n                      });\n                  }\n                });\n            }\n          } catch (error) {\n            console.log('LoginScreen.js 19 | error with login', error);\n          }\n        },\n\n        //Got help with this code from here: https://rnfirebase.io/auth/social-auth#apple\n        onAppleButtonPress: async (rememberMe) => {\n          const appleAuthRequestResponse = await appleAuth.performRequest({\n            requestedOperation: appleAuth.Operation.LOGIN,\n            requestedScopes: [appleAuth.Scope.EMAIL, appleAuth.Scope.FULL_NAME],\n          });\n\n          if (!appleAuthRequestResponse.identityToken) {\n            throw 'Apple Sign-In failed - no identify token returned';\n          }\n\n          const {identityToken, nonce} = appleAuthRequestResponse;\n          const appleCredential = auth.AppleAuthProvider.credential(\n            identityToken,\n            nonce\n          );\n\n          if (rememberMe) {\n            await firebase\n              .auth()\n              .setPersistence(firebase.auth.Auth.Persistence.LOCAL);\n          } else {\n            await firebase\n              .auth()\n              .setPersistence(firebase.auth.Auth.Persistence.NONE);\n          }\n\n          return auth().signInWithCredential(appleCredential);\n        },\n\n        //Got help with this code from here - https://github.com/invertase/react-native-apple-authentication/blob/master/example/app.android.js\n        onAndroidAppleButtonPress: async (rememberMe) => {\n          const rawNonce = uuid();\n          try {\n            appleAuthAndroid.configure({\n              clientId: 'needToChangeThis', //Change this once I have an Apple Developers Account to my clientId in my Apple Developers Account.\n              redirectUri: 'needToChangeThis', //Change this once I have an Apple Developers Account to my redirectURI in my Apple Developers Account.\n              scope: appleAuthAndroid.Scope.ALL,\n              responseType: appleAuthAndroid.ResponseType.ALL,\n              nonce: rawNonce,\n            });\n            const response = await appleAuthAndroid.signIn();\n            if (response) {\n              if (rememberMe) {\n                await firebase\n                  .auth()\n                  .setPersistence(firebase.auth.Auth.Persistence.LOCAL);\n              } else {\n                await firebase\n                  .auth()\n                  .setPersistence(firebase.auth.Auth.Persistence.NONE);\n              }\n              //Pass into token into firebase here... look at Facebook code as an example.\n            }\n          } catch (e) {\n            console.log(e);\n            alert(e);\n          }\n        },\n\n        //Got help with this code from here: https://medium.com/hackernoon/firebase-auth-using-facebook-log-in-on-expo-react-native-2c9f1aaf26b7\n        onFacebookButtonPress: async (rememberMe) => {\n          // await Facebook.initializeAsync({\n          //    appId: '1030848457444492'\n          // })\n          const {type, token} = await Facebook.logInWithReadPermissionsAsync({\n            permissions: ['public_profile', 'email'],\n          });\n\n          if (type === 'success') {\n            if (rememberMe) {\n              await firebase\n                .auth()\n                .setPersistence(firebase.auth.Auth.Persistence.LOCAL);\n            } else {\n              await firebase\n                .auth()\n                .setPersistence(firebase.auth.Auth.Persistence.NONE);\n            }\n\n            let docToConsider = firebase\n              .firestore()\n              .collection('user-logs')\n              .doc('user-creation')\n              .collection('logs')\n              .doc(user.user.toJSON().email);\n            let docExists = (await docToConsider.get()).exists;\n\n            const credential =\n              firebase.auth.FacebookAuthProvider.credential(token);\n            await firebase\n              .auth()\n              .signInWithCredential(credential)\n              .then(() => {\n                if (!docExists) {\n                  docToConsider\n                    .get()\n                    .then((snapshot) => {\n                      setStoredAccountType(snapshot.get('accountType'));\n                    })\n                    .then(() => {\n                      docToConsider.set({\n                        text: `User ${user.user.toJSON().email} was created.`,\n                        accountType: 'Facebook',\n                        createdOn: new Date().toString(),\n                      });\n                    });\n                }\n              });\n          }\n        },\n      }}\n    >\n      {children}\n    </AuthUserContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}